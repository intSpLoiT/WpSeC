import requests
import re

class WPVulnerabilityScanner:
    def __init__(self, url):
        """URL'yi işleyip normalize eder"""
        self.url = url if url.startswith(("http://", "https://")) else "http://" + url
        self.sql_vulnerable = False
        self.xss_vulnerable = False

    def test_sql_injection(self):
        """Temel SQL Injection testleri yapar"""
        payloads = ["'", "\"", " OR 1=1--", "' OR '1'='1' --", "\" OR \"1\"=\"1\" --"]
        test_url = f"{self.url}/?id="

        for payload in payloads:
            try:
                response = requests.get(test_url + payload, timeout=5)
                if any(error in response.text for error in ["sql syntax", "mysql_fetch", "SQLSTATE"]):
                    self.sql_vulnerable = True
                    break
            except requests.exceptions.RequestException:
                pass

    def test_xss(self):
        """Temel XSS testleri yapar"""
        payloads = ["<script>alert('XSS')</script>", '" onmouseover="alert(\'XSS\')"', "<img src=x onerror=alert('XSS')>"]
        test_url = f"{self.url}/?search="

        for payload in payloads:
            try:
                response = requests.get(test_url + payload, timeout=5)
                if payload in response.text:
                    self.xss_vulnerable = True
                    break
            except requests.exceptions.RequestException:
                pass

    def run(self):
        """Tüm zafiyet tespit metodlarını çalıştırır"""
        self.test_sql_injection()
        self.test_xss()

        return {
            "sql_injection": self.sql_vulnerable,
            "xss": self.xss_vulnerable
        }
